--Load shell config
local loadshellcfg = fs.open(".system/applications/system/proshell/config", "r")
local shellInfo = loadshellcfg.readAll()
loadshellcfg.close()
shellcfg = textutils.unserialise(shellInfo)
w, h = term.getSize()

--Figure out what hardware we're on
if term.isColour() then
	if pocket then
		hardwareName = "Pocket Computer"
	elseif commands then
		hardwareName = "Command Computer"
	else
		hardwareName = "Colour Computer"
	end
else
	hardwareName = "Basic Computer"
end

--Core shell functions
local multishell = multishell
local parentShell = shell
local parentTerm = term.current()

if multishell then
    multishell.setTitle( multishell.getCurrent(), "mvProShell" )
end

local bExit = false
local sDir = (parentShell and parentShell.dir()) or ""
local sPath = (parentShell and parentShell.path()) or ".:/rom/programs"
local tAliases = (parentShell and parentShell.aliases()) or {}
local tCompletionInfo = (parentShell and parentShell.getCompletionInfo()) or {}
local tProgramStack = {}
local shell = {}
local tEnv = {
	[ "shell" ] = shell,
	[ "multishell" ] = multishell,
}

function shell.dir()
	return sDir
end

function shell.setDir( _sDir )
	sDir = _sDir
end

function shell.path()
	return sPath
end

function shell.setPath( _sPath )
	sPath = _sPath
end

function shell.resolve( _sPath )
	local sStartChar = string.sub( _sPath, 1, 1 )
	if sStartChar == "/" or sStartChar == "\\" then
		return fs.combine( "", _sPath )
	else
		return fs.combine( sDir, _sPath )
	end
end

local function tokenise( ... )
    local sLine = table.concat( { ... }, " " )
	local tWords = {}
    local bQuoted = false
    for match in string.gmatch( sLine .. "\"", "(.-)\"" ) do
        if bQuoted then
            table.insert( tWords, match )
        else
            for m in string.gmatch( match, "[^ \t]+" ) do
                table.insert( tWords, m )
            end
        end
        bQuoted = not bQuoted
    end
    return tWords
end

function shell.programs( _bIncludeHidden )
	local tItems = {}
	
	-- Add programs from the path
    for sPath in string.gmatch(sPath, "[^:]+") do
    	sPath = shell.resolve( sPath )
		if fs.isDir( sPath ) then
			local tList = fs.list( sPath )
            for n=1,#tList do
                local sFile = tList[n]
				if not fs.isDir( fs.combine( sPath, sFile ) ) and
				   (_bIncludeHidden or string.sub( sFile, 1, 1 ) ~= ".") then
					tItems[ sFile ] = true
				end
			end
		end
    end	

	-- Sort and return
	local tItemList = {}
	for sItem, b in pairs( tItems ) do
		table.insert( tItemList, sItem )
	end
	table.sort( tItemList )
	return tItemList
end

function shell.resolveProgram( _sCommand )
	-- Substitute aliases firsts
	if tAliases[ _sCommand ] ~= nil then
		_sCommand = tAliases[ _sCommand ]
	end

    -- If the path is a global path, use it directly
    local sStartChar = string.sub( _sCommand, 1, 1 )
    if sStartChar == "/" or sStartChar == "\\" then
    	local sPath = fs.combine( "", _sCommand )
    	if fs.exists( sPath ) and not fs.isDir( sPath ) then
			return sPath
    	end
		return nil
    end
    
 	-- Otherwise, look on the path variable
    for sPath in string.gmatch(sPath, "[^:]+") do
    	sPath = fs.combine( shell.resolve( sPath ), _sCommand )
    	if fs.exists( sPath ) and not fs.isDir( sPath ) then
			return sPath
    	end
    end
	
	-- Not found
	return nil
end

local function completeProgram( sLine )
	if #sLine > 0 and string.sub( sLine, 1, 1 ) == "/" then
	    -- Add programs from the root
	    return fs.complete( sLine, "", true, false )

    else
        local tResults = {}
        local tSeen = {}

        -- Add aliases
        for sAlias, sCommand in pairs( tAliases ) do
            if #sAlias > #sLine and string.sub( sAlias, 1, #sLine ) == sLine then
                local sResult = string.sub( sAlias, #sLine + 1 )
                if not tSeen[ sResult ] then
                    table.insert( tResults, sResult )
                    tSeen[ sResult ] = true
                end
            end
        end

        -- Add programs from the path
        local tPrograms = shell.programs()
        for n=1,#tPrograms do
            local sProgram = tPrograms[n]
            if #sProgram > #sLine and string.sub( sProgram, 1, #sLine ) == sLine then
                local sResult = string.sub( sProgram, #sLine + 1 )
                if not tSeen[ sResult ] then
                    table.insert( tResults, sResult )
                    tSeen[ sResult ] = true
                end
            end
        end

        -- Sort and return
        table.sort( tResults )
        return tResults
    end
end

local function completeProgramArgument( sProgram, nArgument, sPart, tPreviousParts )
    local tInfo = tCompletionInfo[ sProgram ]
    if tInfo then
        return tInfo.fnComplete( shell, nArgument, sPart, tPreviousParts )
    end
    return nil
end

function shell.complete( sLine )
    if #sLine > 0 then
        local tWords = tokenise( sLine )
        local nIndex = #tWords
        if string.sub( sLine, #sLine, #sLine ) == " " then
            nIndex = nIndex + 1
        end
        if nIndex == 1 then
            local sBit = tWords[1] or ""
            local sPath = shell.resolveProgram( sBit )
            if tCompletionInfo[ sPath ] then
                return { " " }
            else
                local tResults = completeProgram( sBit )
                for n=1,#tResults do
                    local sResult = tResults[n]
                    local sPath = shell.resolveProgram( sBit .. sResult )
                    if tCompletionInfo[ sPath ] then
                        tResults[n] = sResult .. " "
                    end
                end
                return tResults
            end

        elseif nIndex > 1 then
            local sPath = shell.resolveProgram( tWords[1] )
            local sPart = tWords[nIndex] or ""
            local tPreviousParts = tWords
            tPreviousParts[nIndex] = nil
            return completeProgramArgument( sPath , nIndex - 1, sPart, tPreviousParts )

        end
    end
	return nil
end

local function run( _sCommand, ... )
	local sPath = shell.resolveProgram( _sCommand )
	if sPath ~= nil then
		tProgramStack[#tProgramStack + 1] = sPath
		if multishell then
		    multishell.setTitle( multishell.getCurrent(), fs.getName( sPath ) )
		end
   		local result = os.run( tEnv, sPath, ... )
		tProgramStack[#tProgramStack] = nil
		if multishell then
		    if #tProgramStack > 0 then
    		    multishell.setTitle( multishell.getCurrent(), fs.getName( tProgramStack[#tProgramStack] ) )
    		else
    		    multishell.setTitle( multishell.getCurrent(), "mvProShell" )
    		end
		end
		return result
   	else
    	printError( "Bad command or file name" )
    	return false
    end
end

function shellRun( ... )
	local tWords = tokenise( ... )
	local sCommand = tWords[1]
	if sCommand then
		return run( sCommand, table.unpack( tWords, 2 ) )
	end
end

--Get size of paths for storage 
local function getSize(path)
  local size = 0
  for _, file in ipairs(fs.list(path)) do
    if fs.isDir(fs.combine(path, file)) then
      size = size + getSize(fs.combine(path, file))
    else
      size = size + fs.getSize(fs.combine(path, file))
    end
  end
  return size
end

--UI functions
function shellTitle()
	mvUI.displayReset(shellcfg.titleTextCol, shellcfg.backCol)
	paintutils.drawLine(1, 1, 51, 1, shellcfg.titleCol)
	mvText.dPrint(tostring(shellcfg.title), nil, nil, 1, 1, shellcfg.titleTextCol, shellcfg.titleCol)
	mvText.dPrint("v"..tostring(shellcfg.version), nil, nil, w-#shellcfg.version, 1, shellcfg.titleTextCol, shellcfg.titleCol)
	print("")
end

function diskTools()
	mvUI.displayReset()
	mvText.dPrint("ProShell Disk Tools", nil, nil, 2, 2, shellcfg.textCol, shellcfg.backCol)
	mvText.dPrint("[1] - Label external disk", nil, nil, 2, 5, shellcfg.textCol, shellcfg.backCol)
	mvText.dPrint("[2] - Backup external disk", nil, nil, 2, 6, shellcfg.textCol, shellcfg.backCol)
	mvText.dPrint("[3] - Erase external disk", nil, nil, 2, 7, shellcfg.textCol, shellcfg.backCol)
	mvText.dPrint("Hit [END] to return to prompt", nil, nil, 2, 18, shellcfg.textCol, shellcfg.backCol)
	while true do
	local event, param = os.pullEvent()
		if event == "key" then
			if param == mvExtras.keyMapper("1") then
				if mvPeripheral.diskIsPresent() then
					if mvPeripheral.diskHasData() then
						mvText.dPrint("Enter new disk label", nil, nil, 2, 15, shellcfg.textCol, shellcfg.backCol)
						term.setCursorPos(2, 16)
						sleep()
						write("> ")
						local newLabel = read()
						disk.setLabel(mvPeripheral.diskGetSide(), newLabel)
						diskTools()
						break
					else
						mvText.dPrint("No compatible disk is present", nil, nil, 2, 16, shellcfg.textCol, shellcfg.backCol)
					end
				else
					mvText.dPrint("No disk is present", nil, nil, 2, 16, shellcfg.textCol, shellcfg.backCol)
				end
			elseif param == mvExtras.keyMapper("2") then
				if mvPeripheral.diskIsPresent() then
					if mvPeripheral.diskHasData() then
						mvText.dPrint("Enter new backup name", nil, nil, 2, 15, shellcfg.textCol, shellcfg.backCol)
						term.setCursorPos(2, 16)
						sleep()
						write("> ")
						local newBackup = read()
						fs.copy("disk/*",".backup/"..disk.getID(mvPeripheral.diskGetSide()).."/"..newBackup.."/")
						diskTools()
						break
					else
						mvText.dPrint("No compatible disk is present", nil, nil, 2, 16, shellcfg.textCol, shellcfg.backCol)
					end
				else
					mvText.dPrint("No disk is present", nil, nil, 2, 16, shellcfg.textCol, shellcfg.backCol)
				end
			elseif param == mvExtras.keyMapper("3") then
				if mvPeripheral.diskIsPresent() then
					if mvPeripheral.diskHasData() then
						mvText.dPrint("Type 'y' to erase disk", nil, nil, 2, 15, shellcfg.textCol, shellcfg.backCol)
						term.setCursorPos(2, 16)
						sleep()
						write("> ")
						local eraseDisk = read()
						if eraseDisk == "y" then
							shellRun("delete disk/*")
						else
							mvText.dPrint("Disk not erased", nil, nil, 2, 15, shellcfg.textCol, shellcfg.backCol)
						end
						diskTools()
						break
					else
						mvText.dPrint("No compatible disk is present", nil, nil, 2, 16, shellcfg.textCol, shellcfg.backCol)
					end
				else
					mvText.dPrint("No disk is present", nil, nil, 2, 16, shellcfg.textCol, shellcfg.backCol)
				end
			elseif param == mvExtras.keyMapper("End") then
				mvUI.displayReset()
				break
			else
				--Don't do anything if any other key is hit
			end
		end
	end
end
	

--Shell input
function getInput()
shellTitle()
tCommandHistory = {}
while true do
	x, y = term.getCursorPos()
	mvText.dPrint(tostring(shell.dir()) .. tostring(shellcfg.cursor), nil, nil, 1, y, shellcfg.cursorCol, shellcfg.backCol)
	term.setTextColour( shellcfg.textCol )
	local sLine = read( nil, tCommandHistory, shell.complete ) --shell.complete )
	table.insert( tCommandHistory, sLine )
	if sLine == "shell" then
		shellTitle()
	elseif sLine == "info" or sLine == "ver" then
		print(shellcfg.title.." "..shellcfg.version.." (build "..shellcfg.build..")")
		print(_HOST)
		print(os.version())
		print("  ")
		print("Hardware - "..hardwareName)
		write("Internal disk - ")
		mvExtras.remainingSpace("/")
		if mvPeripheral.diskIsPresent() then
			if mvPeripheral.diskHasData() then
				write("External disk - ")
				mvExtras.remainingSpace("disk/")
			end
		end
	elseif sLine == "erase" then
		for _, side in ipairs(rs.getSides()) do
			if peripheral.isPresent(side) and peripheral.getType(side) == "drive" then
				if disk.isPresent(side) then
					print("All data on the disk will be lost")
					write("Continue? Y/N: ")
					getAns = read()
					if getAns == "y" or getAns == "Y" then
						if fs.exists("disk") then
							shell.run("delete disk/*")
							print("All files have been erased")
						else
							print("Directory is missing")
						end
					else
						print("Erase cancelled")
					end
				else
					print("No disk found")
				end
				break
			end
		end
	elseif sLine == "mvreload" then
		if fs.exists(".preboot/mvCore") then
			os.unloadAPI("mvCore")
			os.loadAPI(".preboot/mvCore")
			print("Reloaded mvCore API")
		else
			print("Failed to reload mvCore API")
		end
	elseif sLine == "disk" then
		print("Total usage on internal disk")
		print("")
		appSize = getSize(".system/applications")
		docSize = getSize(".system/documents")
		mvOSSize = getSize(".system")
		mvCoreSize = getSize(".preboot")
		startupSize = fs.getSize("startup")
		freeSize = fs.getFreeSpace("/")
		if fs.exists(".devtools") then
			devtoolsSize = getSize(".devtools")
			mvCoreSize = mvCoreSize+startupSize+devtoolsSize
			totalSize = mvOSSize+mvCoreSize+freeSize
		else
			mvCoreSize = mvCoreSize+startupSize
			totalSize = mvOSSize+mvCoreSize+freeSize
		end
		usedSize = mvCoreSize+mvOSSize
		print("Applications  -  "..math.ceil((math.ceil( appSize / 100 ) / 10)).."KB")
		print("Documents     -  "..math.ceil((math.ceil( docSize / 100 ) / 10)).."KB")
		print("mvOS system   -  "..math.ceil((math.ceil( mvOSSize / 100 ) / 10)).."KB")
		print("mvCore base   -  "..math.ceil((math.ceil( mvCoreSize / 100 ) / 10)).."KB")
		print("")
		print("Used          -  "..math.ceil((math.ceil( usedSize / 100 ) / 10)).."KB")
		if freeSize >= 1000 * 1000 then
			print("Remaining     -  "..math.ceil((math.ceil( freeSize / ( 100 * 1000 ) ) / 10)).."MB")
		elseif freeSize >= 1000 then
			print("Remaining     -  "..math.ceil((math.ceil( freeSize / 100 ) / 10)).."KB")
		else
			print("Remaining     -  "..math.ceil(freeSize).."B")
		end
		if totalSize >= 1000 * 1000 then
			print("Disk size     -  "..math.ceil((math.ceil( totalSize / ( 100 * 1000 ) ) / 10)).."MB")
		elseif totalSize >= 1000 then
			print("Disk size     -  "..math.ceil((math.ceil( totalSize / 100 ) / 10)).."KB")
		else
			print("Disk size     -  "..math.ceil(totalSize).."B")
		end
	elseif sLine == "disktools" then
		diskTools()
	elseif sLine == "commands" then
		print("shell     -  Reset ProShell display")
		print("info/ver  -  Display software and hardware info")
		print("erase     -  Clear an external disk")
		print("mvreload  -  Reload mvCore API")
		print("disk      -  See disk usage")
		print("disktools -  Manage storage disks")
		print("commands  -  See built in commands")
	elseif sLine == "exit" then
		break
	else
		shellRun(sLine)
	end
end
end

getInput()