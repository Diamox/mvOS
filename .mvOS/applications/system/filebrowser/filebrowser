local tArgs = {...}
local ver = ""
local sTitle = "mvOS File Browser"
local _tArgs = {}
local temp
FilesTabID = multishell.getCurrent()
multishell.setTitle(FilesTabID, "Files")

if shell and shell.getRunningProgram then
	temp = shell.getRunningProgram()
end

temp = temp or "/bla"
local localPath = string.sub(temp,1,#temp-string.len(fs.getName(temp)))
temp = nil -- just because not needed

-- color configuration work in progress
if settingsTable.isDarkMode == true then
	titleBar =  {txt = colors.white,back = colors.blue}
	addressBar = {txt = colors.lightGray,back = colors.black}
	itemWindo = {txt = colors.white,back = colors.black}
	rcmList = {txt = colors.black,back = colors.lightGray} -- rcm = Right Click Menu List
	rcmTitle =  {txt = colors.white,back = colors.blue}
	dialogTitle = {txt = colors.white,back = colors.lightGray}
	dialogWindo = {txt = colors.lightGray,back = colors.black}
	scrollCol = {off = colors.gray, button = colors.gray,back = colors.lightGray}
else
	titleBar =  {txt = colors.white,back = colors.blue}
	addressBar = {txt = colors.gray,back = colors.white}
	itemWindo = {txt = colors.black,back = colors.white}
	rcmList = {txt = colors.black,back = colors.lightGray} -- rcm = Right Click Menu List
	rcmTitle =  {txt = colors.white,back = colors.blue}
	dialogTitle = {txt = colors.white,back = colors.lightGray}
	dialogWindo = {txt = colors.gray,back = colors.white}
	scrollCol = {off = colors.gray, button = colors.gray,back = colors.lightGray}
end

if settingsTable.isDarkMode == true then
	tIcons =  {
		back = {tCol = "blue",bCol = "black",txt = "<- "},
		disk = {tCol = "white",bCol = "blue",txt = "[D]"},
		audio = {tCol = "white",bCol = "red",txt = "(A)"},
		folder = {tCol = "black",bCol = "yellow",txt = "[=]"},
		file = {tCol = "white" ,bCol = "black" ,txt = "[F]"}
	}
else
	tIcons =  {
		back = {tCol = "blue",bCol = "white",txt = "<- "},
		disk = {tCol = "white",bCol = "blue",txt = "[D]"},
		audio = {tCol = "white",bCol = "red",txt = "(A)"},
		folder = {tCol = "black",bCol = "yellow",txt = "[=]"},
		file = {tCol = "black" ,bCol = "white" ,txt = "[F]"}
	}
end

local customLaunch = {
	["Edit"] = "rom/programs/edit",
	["Paint"] = "rom/programs/fun/advanced/paint"
}

-- end configuration

local function help()
	print([[Usage: browser [-d] [-h] [-a] [-u] [--help] [--dir <dir>] [--all] [--update]
--help or -h: display this screen
--dir: define initial directory
--all or -a: show hidden files
--update -u: update]])
end

local function inBouwndry(clickX,clickY,boxX,boxY,width,hight)
	return ( clickX >= boxX and clickX < boxX + width and clickY >= boxY and clickY < boxY + hight )
end

for a = 1, #tArgs do
	if tArgs[a]:sub(1,2) == "--" then
		local cmd = tArgs[a]:sub(3):lower()
		if cmd == "help" then
			help()
			norun = true
		elseif cmd == "dir" then
			dir = tArgs[a+1]
			a = a + 1
		elseif cmd == "all" then
			showAll = true
		elseif cmd == "update" then
			update()
		end
	elseif tArgs[a]:sub(1,1) == "-" then
		for b = 2, #tArgs[a] do
			cmd = tArgs[a]:sub(b, b)
			if cmd == "h" then
				help()
				norun = true
			elseif cmd == "p" then
				dir = tArgs[a+1]
				a = a + 1
			elseif cmd == "a" then
				showAll = true
			elseif cmd == "u" then
				update()
			end
		end
	else
		table.insert(_tArgs, tArgs[a])
	end
end

if (not dir) and shell and shell.dir then
	dir = shell.dir()
end

if dir and shell and shell.resolve then
	dir = shell.resolve(dir)
end

dir = dir or "/"

local function clear()
	term.setCursorBlink(false)
	term.setCursorPos(1,1)
end

--[[
		Code thanks to Cruor 
		http://www.computercraft.info/forums2/index.php?/topic/5802-support-for-shell/
]]--

local function fixArgs(...)
	local tReturn={}
	local str=table.concat({...}," ")
	local sMatch
	while str and #str>0 do
		if string.sub(str,1,1)=="\"" then
			sMatch, str=string.match(str, "\"(.-)\"%s*(.*)")
		else
			sMatch, str=string.match(str, "(%S+)%s*(.*)")
		end
		table.insert(tReturn,sMatch)
	end
	return tReturn
end

--[[ end Cruor function ]]--


-- modified read made to play nice with coroutines

local function readMOD( _sReplaceChar, _tHistory,_wdth)
	local sLine = ""
	term.setCursorBlink( true )

	local nHistoryPos = nil
	local nPos = 0
    if _sReplaceChar then
		_sReplaceChar = string.sub( _sReplaceChar, 1, 1 )
	end
	
	local sx, sy = term.getCursorPos()	

	local w, h = term.getSize()
	if _wdth and type(_wdth) == "number" then
		w = sx + _wdth - 1
	end
	
	local function redraw( _sCustomReplaceChar )
		local nScroll = 0
		if sx + nPos >= w then
			nScroll = (sx + nPos) - w
		end
			
		term.setCursorPos( sx + _wdth - 1, sy )
		term.write(" ")
		term.setCursorPos( sx, sy )
		local sReplace = _sCustomReplaceChar or _sReplaceChar
		if sReplace then
			term.write( string.rep(sReplace,_wdth) )
		else
			term.write( string.sub( sLine, nScroll + 1 ,nScroll + _wdth) )
		end
		term.setCursorPos( sx + nPos - nScroll, sy )
	end
	
	while true do
		local sEvent, param = os.pullEvent()
		if sEvent == "char" then
			sLine = string.sub( sLine, 1, nPos ) .. param .. string.sub( sLine, nPos + 1 )
			nPos = nPos + 1
			redraw()
			
		elseif sEvent == "key" then
			
			if param == keys.left then
				-- Left
				if nPos > 0 then
					nPos = nPos - 1
					redraw()
				end
				
			elseif param == keys.right then
				-- Right				
				if nPos < string.len(sLine) then
					nPos = nPos + 1
					redraw()
				end
			
			elseif param == keys.up or param == keys.down then
                -- Up or down
				if _tHistory then
					redraw(" ");
					if param == keys.up then
						-- Up
						if nHistoryPos == nil then
							if #_tHistory > 0 then
								nHistoryPos = #_tHistory
							end
						elseif nHistoryPos > 1 then
							nHistoryPos = nHistoryPos - 1
						end
					else
						-- Down
						if nHistoryPos == #_tHistory then
							nHistoryPos = nil
						elseif nHistoryPos ~= nil then
							nHistoryPos = nHistoryPos + 1
						end						
					end
					
					if nHistoryPos then
                    	sLine = _tHistory[nHistoryPos]
                    	nPos = string.len( sLine ) 
                    else
						sLine = ""
						nPos = 0
					end
					redraw()
                end
			elseif param == keys.backspace then
				-- Backspace
				if nPos > 0 then
					redraw(" ");
					sLine = string.sub( sLine, 1, nPos - 1 ) .. string.sub( sLine, nPos + 1 )
					nPos = nPos - 1					
					redraw()
				end
			elseif param == keys.home then
				-- Home
				nPos = 0
				redraw()		
			elseif param == keys.delete then
				if nPos < string.len(sLine) then
					redraw(" ");
					sLine = string.sub( sLine, 1, nPos ) .. string.sub( sLine, nPos + 2 )				
					redraw()
				end
			elseif param == keys["end"] then
				-- End
				nPos = string.len(sLine)
				redraw()
			end
		elseif sEvent == "redraw" then
			redraw()
		elseif sEvent == "return" then
			term.setCursorBlink( false )
			return sLine
		end
	end
	
	term.setCursorBlink( false )
	
	return sLine
end

-- end modified read

local function printC(posX,posY,textCol,backCol,text)
	term.setCursorPos(posX,posY)
	term.setTextColor(colors[textCol] or textCol)
	term.setBackgroundColor(colors[backCol] or backCol)
	term.write(text)
end

local function InputBox(title)
	local boxW,boxH = 26,3
	local termX,termY = term.getSize()
	local ofsX,ofsY = math.ceil((termX/2) - (boxW/2)) , math.ceil((termY/2) - (boxH/2)) -- offset from top left
	local options = {"ok","cancel"}
	
	local selected = 1
	local space = 0
	local range = {}
	for i = 1,#options do
		range[i] = {s = space,f = space + string.len(options[i])}
		space = space + string.len(options[i])+3
	end
	local ofC = (boxW/2) - (space/2)
	
	local function drawBox()
		if settingsTable.isDarkMode == true then
			printC(ofsX,ofsY,colors.black,128,string.rep(" ",boxW))
			printC(ofsX+1,ofsY,colors.white,128,(title or "Input"))
			printC(ofsX,ofsY+1,colors.black,colors.black,string.rep(" ",boxW))
			printC(ofsX,ofsY+2,colors.black,colors.black,string.rep(" ",boxW))
			printC(ofsX,ofsY+3,colors.black,colors.black,string.rep(" ",boxW))
		
			for i = 1,#options do
				if i == selected then
					term.setTextColour(1)
					term.setBackgroundColor(128)
					term.setCursorPos(range[i].s + ofC + ofsX - 1,ofsY + 3)
					term.write("["..options[i].."]")
					term.setBackgroundColor(colors.black)
					term.write(" ")
				else
					term.setCursorPos(range[i].s + ofC + ofsX - 1,ofsY + 3)
					term.write(" "..options[i].." ")
				end
			end
			printC(ofsX+2,ofsY+2,colors.white,colors.gray,string.rep(" ",boxW-4))
		else
			printC(ofsX,ofsY,colors.black,256,string.rep(" ",boxW))
			printC(ofsX+1,ofsY,colors.black,256,(title or "Input"))
			printC(ofsX,ofsY+1,colors.black,colors.white,string.rep(" ",boxW))
			printC(ofsX,ofsY+2,colors.black,colors.white,string.rep(" ",boxW))
			printC(ofsX,ofsY+3,colors.black,colors.white,string.rep(" ",boxW))
		
			for i = 1,#options do
				if i == selected then
					term.setTextColour(colours.black)
					term.setBackgroundColor(256)
					term.setCursorPos(range[i].s + ofC + ofsX - 1,ofsY + 3)
					term.write("["..options[i].."]")
					term.setBackgroundColor(colors.white)
					term.write(" ")
				else
					term.setCursorPos(range[i].s + ofC + ofsX - 1,ofsY + 3)
					term.write(" "..options[i].." ")
				end
			end
			printC(ofsX+2,ofsY+2,colors.black,colors.lightGray,string.rep(" ",boxW-4))
		end
		
	end
	drawBox()
	term.setCursorPos(ofsX+2,ofsY+2)
	local co = coroutine.create(function() return readMOD(nil,nil,boxW - 4) end)
	while true do
		local event = {os.pullEvent()}
		if event[1] == "key" or event[1] == "char" then
			if event[2] == 28 then
				local test,data = coroutine.resume(co,"return")
				return data
			else
				coroutine.resume(co,unpack(event))
			end
		elseif event[1] == "mouse_click" then
			if event[4] == ofsY + 3 then
				for i = 1,#options do
					if event[3] >= range[i].s + ofC + ofsX - 1 and event[3] <= range[i].f + ofC + ofsX then
						if options[i] == "ok" then
							local test,data = coroutine.resume(co,"return")
							return data
						elseif options[i] == "cancel" then
							return false
						end
					end
				end
			end
		end
	end
end

local function dialogBox(title,message,options, h, w)
	term.setCursorBlink(false)
	local selected = 1
	title = title or ""
	message = message or ""
	options = options or {}
	local boxW,boxH = (w or 26), (h or 3)
	local termX,termY = term.getSize()
	local ofsX,ofsY = math.ceil((termX/2) - (boxW/2)) , math.ceil((termY/2) - (boxH/2)) -- offset from top left
	
	local space = 0
	local range = {}
	for i = 1,#options do
		range[i] = {s = space,f = space + string.len(options[i])}
		space = space + string.len(options[i])+3
	end
	local ofC = math.ceil((boxW/2)) - math.ceil((space/2))
	
	local function drawBox()
		printC(ofsX,ofsY,dialogTitle.txt,dialogTitle.back," "..title..string.rep(" ",boxW-#title-5).."    ")
		printC(ofsX,ofsY+1,dialogWindo.txt,dialogWindo.back,string.sub(" "..message..string.rep(" ",boxW),1,boxW))
		term.setCursorPos(ofsX,ofsY+2)
		term.write(string.rep(" ",boxW))
		term.setCursorPos(ofsX,ofsY+3)
		term.write(string.rep(" ",boxW))
		for i = 1,#options do
			if i == selected then
				printC(range[i].s + ofC + ofsX - 1,ofsY + 3,"black","lightGray","["..options[i].."]")
				term.setBackgroundColor(dialogWindo.back)
				term.setTextColor(dialogWindo.txt)
				term.write(" ")
			else
				term.setCursorPos(range[i].s + ofC + ofsX - 1,ofsY + 3)
				term.write(" "..options[i].." ")
			end
		end
		term.setCursorPos(ofsX + ofC + space,ofsY + 3)
		term.write(string.rep(" ",boxW - (ofC + space)))
		term.setBackgroundColor(colors.black)
		term.setTextColor(colors.white)			
	end
	while true do
		drawBox()
		event = {os.pullEvent()}
		if event[1] == "key" then
			if event[2] == 203 then -- left
				selected = selected - 1
				if selected < 1 then
					selected = #options
				end
			elseif event[2] == 205 then -- right
				selected = selected + 1
				if selected > #options then
					selected = 1
				end
			elseif event[2] == 28 then -- enter
				return selected , options[selected]
			end
		elseif event[1] == "mouse_click" then
			
			if event[2] == 1 then
				if event[4] == ofsY + 3 then
					for i = 1,#options do
						if event[3] >= range[i].s + ofC + ofsX - 1 and event[3] <= range[i].f + ofC + ofsX then
							return i , options[i]
						end
					end
				end
			end
		end
	end
end

local flag = true
local fSlash = "/"
local path = {dir:match("[^/]+")}
local function stringPath() -- compacted this a lot
	return fSlash..table.concat(path,fSlash)
end

local function osRunSpaces(sFileLocation,...) -- getRunningProgram() ["shell"] = shell
	clear()
	if os.newThread then
		os.newThread(false,...)
	else
	local fProg,probblem = loadfile(sFileLocation)
		if fProg then
			local tEnv = {["shell"] = {}}
			setmetatable(tEnv.shell,{ __index = shell})
			tEnv.shell.getRunningProgram = function()
				return sFileLocation
			end
			setmetatable(tEnv,{ __index = _G})
			setfenv(fProg,tEnv)
			local test,probblem = pcall(fProg,...)
			if not test then
				print(probblem)
				dialogBox("ERROR",tostring(probblem),{"ok"},3,30)
			else
				return true
			end
		else
			print(probblem)
			dialogBox("ERROR",tostring(probblem),{"ok"},3,30)
		end
	end
end

local function rClickMenu(title,tList,tItem,posX,posY)

	term.setCursorBlink(false)
	local BoxTitle = title
	local choices = {}
	local termX,termY = term.getSize()
	local offX,offY
	
	local width = #BoxTitle + 2
	local hight
	
	for k,v in pairs(tList) do
		if v ~= nil then
			table.insert(choices,k)
		end
		if width < #k + 2 then
			width = #k + 2
		end
	end
	
	if #choices == 0 then
		return
	end
	
	hight = #choices + 1
	table.sort(choices)
	
	offX,offY = math.ceil((termX/2) - (width/2)),math.ceil((termY/2) - (hight/2))
	
	if posX and posY then -- offX,offY = posX,posY
		if posX >= termX - width - 1 then
			offX = termX - width - 1
		else
			offX = posX
		end
		if posY >= termY - hight then
			offY = termY - hight
		else
			offY = posY
		end
	end
	
	local function reDrawer()
		printC(offX,offY,rcmTitle.txt,rcmTitle.back," "..BoxTitle..string.rep(" ",width - #BoxTitle - 1))
		for i = 1,#choices do
			printC(offX,offY + i,rcmList.txt,rcmList.back," "..choices[i]..string.rep(" ",width - #choices[i] - 1))
		end
	end
	
	while true do
		reDrawer()
		local event = {os.pullEvent()}
		if event[1] == "mouse_click" then
			if event[2] == 1 then -- event[3] = x event[4] = y
				if event[4] > offY and event[4] < hight + offY and event[3] >= offX and event[3] < width + offX then
					--dialogBox("ERROR:",type(tList[choices[event[4] - offY]]),{"ok"})
					if type(tList[choices[event[4] - offY]]) == "function" then
						return tList[choices[event[4] - offY]](tItem)
					elseif type(tList[choices[event[4] - offY]]) == "table" then
						return rClickMenu("Options",tList[choices[event[4] - offY]],tItem,event[3],event[4])
					elseif type(tList[choices[event[4] - offY]]) == "string" then
						return osRunSpaces(
								unpack(
									fixArgs(
										tList[choices[event[4] - offY]].." \""..stringPath()..fSlash..tItem.n.."\""
									)
								)
							)
					else
						dialogBox("ERROR:","somthing up with new rMenu",{"ok"})
					end
				else
					return
				end
			elseif event[2] == 2 then
				return
			end
		end
	end
	
end

local function fileSelect(mode) -- save_file open_file browse < not yet implemented
	
	local title = sTitle.." "..ver
	local bRun = true
	local clipboard = nil
	local cut = false
	
	local termX,termY = term.getSize()
	local offsetX,offsetY = 17,1
	local hight,width = math.ceil(termY-2),math.ceil(termX-2)
	local oldHight,oldWidth
	
	-- offsets
	local boxOffX,boxOffY = offsetX-1,offsetY+1
	local boxH,boxW = hight,width
	
	local barX,barY = offsetX,offsetY
	local barH,barW = 1,width
	
	local tbarX,tbarY = offsetX,offsetY
	local tbarH,tbarW = 1,width
	
	local exitX,exitX2,exitY = 49, 51, 1	
	local pading = string.rep(" ",boxW)
	local list
	
 local listOff = 0
	
	local sPath
	local tItemList = {}
	
	local function newList()
		listOff = 0
		flag = true
		tItemList = {{n = "..", id = "back"}} -- adds a back item at top of list
		sPath = stringPath()
		local folders = {}
		local files = {}
		local disks = {}
		if not fs.exists(sPath) then
			path = {}
			sPath = stringPath()
			dialogBox("ERROR:","Path no longer exists",{"ok"})
		end
		local test,list = pcall(fs.list,sPath) -- stopes fs.list crash
		if list == nil then
			list = {}
			dialogBox("ERROR : ","fs.list crashed",{"ok"})
		end
		if #path == 0 then
			for i,v in pairs(rs.getSides()) do
				if disk.isPresent(v) then
					if disk.hasData(v) then
						table.insert(tItemList,{n = disk.getMountPath(v), id = "disk",s = v})
						disks[disk.getMountPath(v)] = true
					elseif disk.hasAudio(v) then
						table.insert(tItemList,{n = disk.getAudioTitle(v), id = "audio",s = v})
					end
				end
			end
		end
		for i,v in pairs(list) do
			if fs.isDir(sPath..fSlash..v) then
				table.insert(folders,v)
			else
				table.insert(files,v)
			end
		end
		table.sort(folders)
		table.sort(files)
		for i,v in pairs(folders) do
			if disks[v] == nil then
				table.insert(tItemList,{n = v, id = "folder"})
			end
		end
		for i,v in pairs(files) do
			table.insert(tItemList,{n = v, id = "file"})
		end
	end
	
	local function paste()
		if cut then
			local s, m = pcall(
				function()
					fs.move(clipboard[1]..fSlash..clipboard[2], stringPath()..fSlash..clipboard[2])
					cut = false
					clipboard = nil
				end)
			if not s then
				dialogBox("Error", (m or "Couldn't move"), {"ok"}, 4, 30)
			end
		else
			local s, m = pcall(function()
				if fs.exists(stringPath()..fSlash..clipboard[2]) then
					fs.copy(clipboard[1]..fSlash..clipboard[2], stringPath()..fSlash.."copy-"..clipboard[2])
				else
					fs.copy(clipboard[1]..fSlash..clipboard[2], stringPath()..fSlash..clipboard[2])
				end
			end)
			if not s then
				dialogBox("Error", (m or "Couldn't copy"), {"ok"}, 4, 30)
			end
		end
		newList()
	end
	
	-- this section bellow handles the right click menu
	
	local tmenu = {
		disk = {
			["Open"] = function(tItem)
				table.insert(path,tItem.n)
				newList()
			end,
			["Copy"] = function(tItem)
				clipboard = {stringPath(), tItem.n}
				cut = false
			end,
			["Eject"] = function(tItem)
				if dialogBox("Confirm","Eject "..fSlash..tItem.n.." "..tItem.s,{"yes","no"}) == 1 then
					disk.eject(tItem.s)
					newList()
				end
			end,
			["ID label"] = function(tItem)
				dialogBox("ID label",disk.getDiskID(tItem.s).." "..tostring(disk.getLabel(tItem.s)),{"ok"})
			end,
			["Set label"] = function(tItem)
				local name = InputBox("Label?")
				if name then
					disk.setLabel(tItem.s,name)
				end
			end,
			["Clear label"] = function(tItem)
				if dialogBox("Confirm","Cleal Label from "..tItem.s,{"yes","no"}) == 1 then
					disk.setLabel(tItem.s)
				end
			end
		},
		folder = {
			["Open"] = function(temp)
				table.insert(path,temp.n)
				newList()
			end,
			["Copy"] = function(tItem)
				clipboard = {stringPath(), tItem.n}
				cut = false
			end,
			["Cut"] = function(tItem)
				clipboard = {stringPath(), tItem.n}
				cut = true
			end,
			["Delete"] = function(tItem)
				if dialogBox("Confirm","Delete "..tItem.id.." "..tItem.n,{"yes","no"}) == 1 then
					if fs.isReadOnly(stringPath()..fSlash..tItem.n) then
						dialogBox("ERROR",tItem.id.." Is read Only",{"ok"})
					else
						fs.delete(stringPath()..fSlash..tItem.n)
						newList()
					end
				end
			end,
			["Rename"] = function(tItem)
				local sName = InputBox("New Name")
				if type(sName) == "string" and sName ~= "" then
					local s, m = pcall(function()
						fs.move(stringPath()..fSlash..tItem.n,stringPath()..fSlash..sName)
					end)
					if not s then
						dialogBox("Error", (m or "Rename failed"), {"ok"})
					end
				end
				newList()
			end
		},
		file = {
			["Run"] = {
				["Run"] = function(tItem)
					osRunSpaces(stringPath()..fSlash..tItem.n)
				end,
				["Run CMD"] = function(tItem)
					local cmd = InputBox("Commands")
					if cmd then
						osRunSpaces(stringPath()..fSlash..tItem.n,unpack(fixArgs(cmd)))
					end
				end,
			},
			["Open With"] = customLaunch,
			["Rename"] = function(tItem)
				local sName = InputBox("New Name")
				if type(sName) == "string" and sName ~= "" then
					local s, m = pcall(function()
						fs.move(stringPath()..fSlash..tItem.n,stringPath()..fSlash..sName)
					end)
					if not s then
						dialogBox("Error", (m or "Rename failed"), {"ok"})
					end
				end
				newList()
			end,
			["Delete"] = function(tItem)
				if dialogBox("Confirm","Delete "..tItem.id.." "..tItem.n,{"yes","no"}) == 1 then
					if fs.isReadOnly(stringPath()..fSlash..tItem.n) then
						dialogBox("ERROR",tItem.id.." Is read Only",{"ok"})
					else
						fs.delete(stringPath()..fSlash..tItem.n)
						newList()
					end
				end
			end,
			["Cut"] = function(tItem)
				clipboard = {stringPath(), tItem.n}
				cut = true
			end,
			["Copy"] = function(tItem)
				clipboard = {stringPath(), tItem.n}
				cut = false
			end
		},
		audio = {
		},
		back = {
		},
		blank = { -- tmenu.blank.Paste = 
			["Paste"] = nil,
			["New File"] = function()
				local name = InputBox()
				if name then
					if fs.exists(stringPath()..fSlash..name) then
						dialogBox("ERROR","Name exists",{"ok"})
 				else
						local file = fs.open(stringPath()..fSlash..name,"w")
						if file then
							file.write("")
							file.close()
							newList()
						else
							dialogBox("ERROR","File not created",{"ok"})
						end
					end
				end
			end,
			["New Folder"] = function()
				local name = InputBox()
				if name then
					if fs.exists(stringPath()..fSlash..name) then
						dialogBox("ERROR","Name exists",{"ok"})
					else
						if pcall(fs.makeDir,stringPath()..fSlash..name) then
							newList()
						else
							dialogBox("ERROR","Access Denied",{"ok"})
						end
					end
				end
			end,
			["Preferences"] = preferences
		}
	}
	
	-- end right click menu
	
	local function scrollBar(posX,posY)
		if posX == boxOffX+boxW+1 and posY > boxOffY and posY <= boxOffY+boxH then
			if #tItemList > boxH then
				if posY == boxOffY + 1 then
					listOff = 0
				elseif posY == boxOffY+boxH then
					listOff = #tItemList + 1 - boxH
				else
					listOff = math.ceil((posY - boxOffY - 1 )*(((#tItemList - boxH+2)/boxH)))
				end
				flag = true
			end
		end
	end
	
	newList()
	
	while bRun do
		if flag then
			flag = false
			-- clear
			if oldHight ~= hight and oldWidth ~= width then
				term.setBackgroundColor(colors.black)
				oldHight,oldWidth = hight,width
			end
			-- draw top title bar
			local b = tbarW - #title -2
			if b < 0 then
				b = 0
			end
			mvUI.tabbedUI(".system/applications/system/filebrowser/config",1)
			if settingsTable.isDarkMode == true then
				mvText.dPrint("Shortcuts", nil, nil, 2, 4, 1, colours.grey)
				mvText.dPrint("Root", nil, nil, 2, 6, 1, colours.grey)
				mvText.dPrint("Applications", nil, nil, 2, 7, 1, colours.grey)
				mvText.dPrint("Documents", nil, nil, 2, 8, 1, colours.grey)
				mvText.dPrint("Actions", nil, nil, 2, 11, 1, colours.grey)
				mvText.dPrint("New file", nil, nil, 2, 13, 1, colours.grey)
				mvText.dPrint("New folder", nil, nil, 2, 14, 1, colours.grey)
				mvText.dPrint("Paste item", nil, nil, 2, 15, 1, colours.grey)
				mvText.dPrint("-------------", nil, nil, 2, 5, 1, colours.grey)
				mvText.dPrint("-------------", nil, nil, 2, 12, 1, colours.grey)
			else
				mvText.dPrint("Shortcuts", nil, nil, 2, 4, colours.black, colours.lightGrey)
				mvText.dPrint("Root", nil, nil, 2, 6, colours.black, colours.lightGrey)
				mvText.dPrint("Applications", nil, nil, 2, 7, colours.black, colours.lightGrey)
				mvText.dPrint("Documents", nil, nil, 2, 8, colours.black, colours.lightGrey)
				mvText.dPrint("Actions", nil, nil, 2, 11, colours.black, colours.lightGrey)
				mvText.dPrint("New file", nil, nil, 2, 13, colours.black, colours.lightGrey)
				mvText.dPrint("New folder", nil, nil, 2, 14, colours.black, colours.lightGrey)
				mvText.dPrint("Paste item", nil, nil, 2, 15, colours.black, colours.lightGrey)
				mvText.dPrint("-------------", nil, nil, 2, 5, colours.black, colours.lightGrey)
				mvText.dPrint("-------------", nil, nil, 2, 12, colours.black, colours.lightGrey)
			end
			
			-- draw location bar
			local a = barW - #sPath - 1
			if a < 0 then
				a = 0
			end
			local tmppath = sPath
			if shell and shell.getDisplayName then
				tmppath = shell.getDisplayName(sPath)
				--dialogBox("yay")
			else
				--dialogBox("moop")
			end
			tmppath = tmppath or sPath
			local a = barW - #tmppath - 1
			if a < 0 then
				a = 0
			end
			 printC(17,2,addressBar.txt,addressBar.back,string.sub(" "..tmppath,1,barW)..string.rep(" ",a))

			-- draw scroll bar
			if #tItemList > boxH then
				term.setBackgroundColor(scrollCol.back)
				for i = 1,boxH do
					term.setCursorPos(boxOffX+boxW-14,i + boxOffY)
					local scroll = math.floor( boxH* (listOff/(#tItemList-boxH+2)) )+1
					if i == scroll then
						term.setBackgroundColor(scrollCol.button)
						term.write(" ")
						term.setBackgroundColor(scrollCol.back)
					else
						term.write(" ")
					end
				end
			else
				term.setBackgroundColor(scrollCol.off)
				for i = 1,boxH do
					term.setCursorPos(boxOffX+boxW+2,i + boxOffY)
				end
			end
			
			-- draw main section

			for i = 1,boxH do -- listOff
				local sel = i+listOff
				if tItemList[sel] then
					printC(1+boxOffX,i+boxOffY,(tIcons[tItemList[sel].id].tCol or itemWindo.txt),(tIcons[tItemList[sel].id].bCol or itemWindo.back),( tIcons[tItemList[sel].id].txt or "   "))
					printC(4+boxOffX,i+boxOffY,itemWindo.txt,itemWindo.back,string.sub(" "..tItemList[sel].n..pading,1,boxW-3))
				else
					printC(1+boxOffX,i+boxOffY,itemWindo.txt,itemWindo.back,pading)
				end
			end
			
		end
		
		-- react to events
		local event = {os.pullEvent()}
		
		if event[1] == "mouse_click" then
			if inBouwndry(event[3],event[4],boxOffX+1,boxOffY+1,boxW,boxH) then
				local selected = tItemList[event[4]+listOff-boxOffY]
				if selected and inBouwndry(event[3],event[4],boxOffX+1,event[4],#selected.n + 4,1) then
					if event[2] == 1 then -- left mouse
						if selected.id == "back" then
							table.remove(path,#path)
							newList()
						elseif selected.id == "folder" or selected.id == "disk" then
							table.insert(path,selected.n)
							newList()
						elseif selected.id == "audio" then
							shell.run(".system/applications/user/mvplayer/mvplayer")
							bRun = false
						elseif selected.id == "file" then
							if dialogBox("Run file ?",selected.n,{"yes","no"}) == 1 then
								osRunSpaces(stringPath()..fSlash..selected.n)
							end
							flag = true
						end
					elseif event[2] == 2 then -- right mouse
						rClickMenu("Options",tmenu[selected.id],selected,event[3],event[4])
						flag = true
					end
				end
			elseif event[2] == 1 and event[3] >= 1 and event[3] <= 15 and event[4] == 6 then
				path = {}
				table.insert(path)
				newList()
			elseif event[2] == 1 and event[3] >= 1 and event[3] <= 15 and event[4] == 7 then
				path = {".system/applications"}
				table.insert(path)
				newList()
			elseif event[2] == 1 and event[3] >= 1 and event[3] <= 15 and event[4] == 8 then
				path = {".system/documents"}
				table.insert(path)
				newList()
			elseif event[2] == 1 and event[3] >= 1 and event[3] <= 15 and event[4] == 13 then
				local name = InputBox()
				if name then
					if fs.exists(stringPath()..fSlash..name) then
						dialogBox("ERROR","Name exists",{"ok"})
 				else
						local file = fs.open(stringPath()..fSlash..name,"w")
						if file then
							file.write("")
							file.close()
							newList()
						else
							dialogBox("ERROR","File not created",{"ok"})
						end
					end
				end
				flag = true
			elseif event[2] == 1 and event[3] >= 1 and event[3] <= 15 and event[4] == 14 then
				local name = InputBox()
				if name then
					if fs.exists(stringPath()..fSlash..name) then
						dialogBox("ERROR","Name exists",{"ok"})
					else
						if pcall(fs.makeDir,stringPath()..fSlash..name) then
							newList()
						else
							dialogBox("ERROR","Access Denied",{"ok"})
						end
					end
				end
				flag = true
			elseif event[2] == 1 and event[3] >= 1 and event[3] <= 15 and event[4] == 15 then
				if clipboard then
					paste()
				else
					--Do nothing
				end
			elseif event[2] == 1 and event[3] >= exitX and event[3] <= exitX2 and event[4] == exitY then
				--if dialogBox("Confirm","Exit application",{"yes","no"}) == 1 then
					bRun = false
			--end
				flag = true
			elseif event[2] == 1 then
				scrollBar(event[3],event[4])
			end
		elseif event[1] == "mouse_scroll" then -- flag this needs new math
			local old = listOff
			listOff = listOff + event[2]
			if listOff < 0 then
				listOff = 0
			end
			if #tItemList + 1 - boxH > 0 and listOff > #tItemList + 1 - boxH then
				listOff = #tItemList + 1 - boxH
			elseif listOff > 0 and #tItemList + 1 - boxH < 0 then
				listOff = 0
			end
			if listOff ~= old then
				flag = true
			end
		
		elseif event[1] == "mouse_drag" then -- scroll bar
			scrollBar(event[3]-1,event[4])
		elseif event[1] == "disk" or event[1] == "disk_eject" then
			newList()
		elseif event[1] == "window_resize" then
			termX,termY = term.getSize()
			offsetX,offsetY = 1,1
			hight,width = math.ceil(termY-2),math.ceil(termX-2)
			
			boxOffX,boxOffY = offsetX,offsetY + 2
			boxH,boxW = hight - 2 ,width - 2
			
			barX,barY = offsetX + 1,offsetY + 2
			barH,barW = 1,width - 1
			
			tbarX,tbarY = offsetX + 1,offsetY + 1
			tbarH,tbarW = 1,width - 1
			
			exitX,exitY = offsetX + width - 1 ,offsetY + 1
			pading = string.rep(" ",boxW)
			
			flag = true
		elseif event[1] == "redraw" then
			flag = true
		end
	end
end

local function main()
	if term.isColor() then
		clear()
		fileSelect()
		clear()
	else
		error("Hardware not compatible")
	end
end

local trash = (norun or main())
