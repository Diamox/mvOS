--Disable Terminate
oldPullEvent = os.pullEvent
os.pullEvent = os.pullEventRaw

--Load boot config
local loadBoot = fs.open(".preboot/cfg/.config", "r")
local bootInfo = loadBoot.readAll()
loadBoot.close()
bootcfg = textutils.unserialise(bootInfo)

--Load mvCore
os.loadAPI(".preboot/mvCore")

--ProShell validation
function validateShell()
	if not mvCore.validateHash(".preboot/Shell","9fc4584591faf78b0b242eee6fc6ffb4e67438c792ce80552f12b1e5fae98e1b") then
		mvCore.fileError(".preboot/Shell","corrupt")
	end
end

--mvSetup validation
function validateSetup()
	if not mvCore.validateHash(".preboot/mvSetup","3681f0fbfbd7a3c48a99abc07c4984d901113f9c0ebf68771e22c0694b6a328a") then
		mvCore.fileError(".preboot/mvSetup","corrupt")
	end
end

--Splash Screen
function showSplash(showText)
	mvCore.displayReset()
	if term.isColour() then
		if not pocket then
			if fs.exists(".preboot/img/colsyslogo") then
				if mvCore.validateHash(".preboot/img/colsyslogo", "4a95ac704bcfb72a392f3fb1f4c3594129d6e2e888906d09f52600d4acd033af") then
					paintutils.drawImage(paintutils.loadImage(".preboot/img/colsyslogo"), 1, 1)
					sleep()
				else
					mvCore.dPrint("Starting mvCore", "c", nil, 1, 10, 1, colours.black)
				end
			else
				mvCore.dPrint("Starting mvCore", "c", nil, 1, 10, 1, colours.black)
			end
		else
			mvCore.dPrint("Starting mvCore", "c", nil, 1, 10, 1, colours.black)
		end
	else
		if fs.exists(".preboot/img/bassyslogo") then
			if mvCore.validateHash(".preboot/img/bassyslogo", "350aefb241a721184c403c12353bfee2fdc7df9d63eaca7a5b311a9d0c305d0d") then
				paintutils.drawImage(paintutils.loadImage(".preboot/img/bassyslogo"), 1, 1)
				sleep()
			else
				mvCore.dPrint("Starting mvCore", "c", nil, 1, 10, 1, colours.black)
			end
		else
			mvCore.dPrint("Starting mvCore", "c", nil, 1, 10, 1, colours.black)
		end
	end
	if showText == true then
		if not pocket then
			mvCore.dPrint("Hit [DEL] for Boot Menu", "c", nil, 1, 18, 128)
		end
	end
end
showSplash(true)

--mvCore Boot Manager, where do you want to go today?
local function bootManager()
	mvCore.displayReset()
	if pocket then
		mvCore.dPrint("mvCore Boot Manager", nil, nil, 2, 2, 1)
		mvCore.dPrint("[1] - Continue normally", nil, nil, 2, 5, 1)
		mvCore.dPrint("[2] - Start ProShell", nil, nil, 2, 6, 1)
		mvCore.dPrint("[END] - shut down", nil, nil, 2, 18, 1)
		mvCore.dPrint(tostring(mvCore.copyright()), nil, nil, 2, 19, 128)
	else
		mvCore.dPrint("mvCore Boot Manager", nil, nil, 2, 2, 1)
		mvCore.dPrint("[1] - Continue normally", nil, nil, 2, 5, 1)
		mvCore.dPrint("[2] - Start mvCore ProShell", nil, nil, 2, 6, 1)
		if term.isColour() then
			mvCore.dPrint("[3] - Start mvCore Setup", nil, nil, 2, 7, 1)
		end
		mvCore.dPrint("Hit [END] to shut down", nil, nil, 2, 18, 1)
		mvCore.dPrint(tostring(mvCore.copyright()), nil, nil, 2, 19, 128)
	end
	while true do
	local event, param = os.pullEvent()
		if event == "key" then
			if param == mvCore.rawKeyMapper("1") then
				if bootcfg.autoStartExtOS == true then
					if fs.exists(bootcfg.extOSBootDir) then
						shell.run(bootcfg.extOSBootDir)
					else
						mvCore.displayReset()
					end
				end
				shell.run(".preboot/shell")
				os.shutdown()
				break
			elseif param == mvCore.rawKeyMapper("2") then
				if pocket then
					mvCore.dPrint("[2] - Loading ProShell...", nil, nil, 2, 6, colours.lightGrey)
				else
					mvCore.dPrint("[2] - Loading mvCore ProShell...", nil, nil, 2, 6, colours.lightGrey)
				end
				validateShell()
				mvCore.displayReset()
				sleep()
				shell.run(".preboot/shell")
				os.shutdown()
				break
			elseif param == mvCore.rawKeyMapper("3") then
				if term.isColour() then
					if not pocket then
						mvCore.dPrint("[3] - Loading mvCore Setup...", nil, nil, 2, 7, colours.lightGrey)
						validateSetup()
						shell.run(".preboot/mvSetup")
						os.shutdown()
						break
					end
				end
			elseif param == mvCore.rawKeyMapper("End") then
				os.shutdown()
				break
			else
				--Don't do anything if any other key is hit
			end
		end
	end
end

--Where everything real starts
os.startTimer(1)
while true do
    local event, param = os.pullEvent()    
    if event == "timer" then
		showSplash(false)
		validateShell()
		validateSetup()
		if bootcfg.autoStartExtOS == true then
			if fs.exists(bootcfg.extOSBootDir) then
				shell.run(bootcfg.extOSBootDir)
			else
				mvCore.displayReset()
			end
		end
		shell.run(".preboot/shell")
		os.shutdown()
		break
    elseif event == "key" then
        if param == mvCore.rawKeyMapper("Delete") then
            bootManager()
			break
		end
    end
end